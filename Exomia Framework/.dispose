#region IDisposable Support
/// <summary>
/// true if the instance is allready disposed; false otherwise
/// </summary>
protected bool _disposed = false;

/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged/managed resources. 
/// </summary>
public void Dispose()
{
    Dispose(true);
    GC.SuppressFinalize(this);
}

private void Dispose(bool disposing)
{
    if (!_disposed)
    {
        OnDispose(disposing);
        if (disposing) { /* USER CODE */ }
        else { /*FINALIZER*/  }
        _disposed = true;
    }
}

/// <summary>
/// called then the instance is disposing
/// </summary>
/// <param name="disposing">true if user code; false called by finalizer</param>
protected virtual void OnDispose(bool disposing) { }

#endregion

#region IDisposable Support
private bool _disposed = false;

void Dispose(bool disposing)
{
    if (!_disposed)
    {
        if (disposing) { /* USER CODE */ }
        else { /*FINALIZER*/  }
        _disposed = true;
    }
}

/// <summary>
/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged/managed resources. 
/// </summary>
public void Dispose()
{
    Dispose(true);
    GC.SuppressFinalize(this);
}

#endregion