/** Shaderdefinition
 *
 * technique DEFAULT
 *  vs VSMain vs_5_0 OptimizationLevel3
 *  ps PSMain ps_5_0 OptimizationLevel3
 */

Texture2D g_Texture : register(t0);
SamplerState g_Sampler : register(s0);

cbuffer PerFrame : register(b0)
{
	float4x4 g_WorldMatrix;
	float4x4 g_ViewMatrix;
	float4x4 g_ProjectionMatrix;
	float4x4 g_WorldViewProjectionMatrix;
};

struct VS_INPUT
{
	float4 p  : SV_POSITION0;
	float4 c  : COLOR0;
	float2 uv : TEXCOORD0;
};

struct PS_INPUT
{
	float4 p  : SV_POSITION0;
	float4 c  : COLOR0;
	float2 uv : TEXCOORD0;
};

PS_INPUT VSMain(VS_INPUT input)
{
	PS_INPUT output = (PS_INPUT)0;
	output.p = mul(input.p, g_WorldViewProjectionMatrix);
	output.c = input.c / 255;
	output.uv = input.uv;
	return output;
}

float4 PSMain(PS_INPUT input) : SV_TARGET
{
    //discard;
    //clip(-1);
	return g_Texture.Sample(g_Sampler, input.uv) * input.c;
}

