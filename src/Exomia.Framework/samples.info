########################################################################
##################           GENERAL SAMPLES          ##################
########################################################################
1: use EventArgs.Empty instead of new EventArgs()

########################################################################
##################           FAST INT MATH            ##################
########################################################################

1: integer division by a pow of 2 use bit shifting instead of division operator!
	sample: value / 2 = value >> 1
	sample: value / 4 = value >> 2
	sample: value / 8 = value >> 3
	sample: ,...
2: integer multiplying by a pow of 2 use bit shifting instead of multiplying operator!
	sample: value * 2 = value << 1
	sample: value * 4 = value << 2
	sample: value * 8 = value << 3
	sample: ,...
3: check if a integer is even! isEven = (i % 2) == 0; use bit operation
	sample: isEven = (i & 1) == 0;
4: integer absolute value instead of (int)Math.Abs(value)
	sample: abs = (value ^ (value >> 31)) - (value >> 31);
5: integer equal sign eqSign = a * b > 0;
	sample: eqSign = a ^ b >= 0;
6: modulo for negative and positive values
	sample:			int res;
					res = (res = value % 4) >= 0 ? res : res + 4;	//faster in x86 mode <> lil bit slower (<0.1%) or same speed in x64 compared to "alternative"
	alternative:	int res = value % 4;
					if(res < 0) { res += 4; }
	x86:			int res = value & 3;							//faster than the 2 above in x86 mode
	
	
	
########################################################################
##################       COMPILER OPTIMISATION        ##################
########################################################################
1: [MethodImpl(MethodImplOptions.AggressiveInlining)] for AggressiveInlining a method
	sample: 
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int Abs(int x)
        {
            return (x + (x >> 31)) ^ (x >> 31);
        }
			

########################################################################
##################                DEBUG               ##################
########################################################################
1: use Debug.Assert(true == false, "true == false"); for DEBUG help.
2: use [Conditional("DEBUG")] for method/functions for debugging perposes
	sample: 
		[Conditional("DEBUG")]
        void someMethod()
        {
            Console.WriteLine("test");
        }